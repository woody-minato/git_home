Gitの練習をしていきます

5/13
基本的なフローを学びます
1. git init
2. git add "修正したファイル名"
　→ステージに一旦追加する。変更が完了した分だけを記録できるようにするため。
3. git  commit 
　→ここでvimにてコメントを追記する。ローカルリポジトリにコミットすることで、スナップショットとして記録される。

4. git hub のリポジトリをすでに作成している場合は
…or push an existing repository from the command line
の項目のコマンドをターミナルにコピペ

5. ここでパスワードなどを求められるが、これを回避するためには以下のURLを参考にする。
https://web-guided.com/1494/


5/14
gitのデータ構造を学びます。
コマンドの裏でどのようなことが起きているかを学びます。

◻︎git add
　ワークツリー：index.htmlを修正
　↓
　ローカルリポジトリ：圧縮ファイルA作成（index.htmlのファイル内容を圧縮）
　↓
　ステージ：インデックス作成（index.html, 圧縮ファイルAが対となったもの）

◻︎ git commit
　ローカルリポジトリ：ツリー1を作成（インデックスと内容は同じ）
　　　　　　　　　　　コミット1を作成（ツリー１、作成者、日付、コミットメッセージが含まれる）


5/16
・ステージに追加する
git add <ファイル名>
git add <ディレクトリ名>
git add 。


・ローカルリポジトリに追加する
git commit
git commit -m "<メッセージ>"
git commit -v
 ファイルに対してどのような変更を加えたかまでを確認できるコマンド


・状態を確認する
git status 
変更されたファイルの確認を行う。
commitの前に確認しておくことを推奨


・変更差分を確認する
git diff
git diff <ファイル名>
 git addする前の変更差分を確認

git diff --staged
 git addした後の変更差分を確認


・過去の変更履歴を確認する
git log

git log --oneline
 １行で表示

git log -p <ファイル名>

git log -n <コミット数>


・ファイルの削除を記録
git rm <ファイル名>
git rm -r <ディレクトリ名>

git rm --cached <ファイル名>
 ワークツリーには残したいけど、gitの記録（リポジトリ）からは削除したい場合のコマンド
 例）個人情報など公開したくないファイルを誤ってgitに載せてしまった場合など


・ファイルの移動
git mv <旧ファイル> <新ファイル>
